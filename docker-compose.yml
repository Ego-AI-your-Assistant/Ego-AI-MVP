version: '3.8'

services:
  db:
    image: postgres:16
    container_name: ego-ai-db
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ego-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: ego-ai-pgadmin
    ports:
      - "5050:80"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - ego-ai-network

  backend:
    build: ./backend
    container_name: ego-ai-backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - ego-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: ./frontend
    container_name: ego-ai-frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ego-ai-network

  ml-service:
    build: ./ML
    container_name: ego-ai-ml-service
    ports:
      - "8001:8001"
    env_file:
      - ./ML/.env
    networks:
      - ego-ai-network

  mongo:
    image: mongo:latest
    container_name: ego_ai_mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ego_ai_db
    networks:
      - ego-ai-network

  # nginx:
  #   build: ./nginx
  #   container_name: ego-ai-nginx
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - ego-ai-network

volumes:
  postgres_data:
  mongo_data:

networks:
  ego-ai-network:
    driver: bridge
